#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
#ifndef SEGMENT_SWIFT_H
#define SEGMENT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Segment",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSString;
@class SEGDestinationMetadata;

SWIFT_PROTOCOL_NAMED("ObjCRawEvent")
@protocol SEGRawEvent <NSObject>
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@property (nonatomic, readonly, copy) NSString * _Nullable messageId;
@property (nonatomic, readonly, copy) NSString * _Nullable timestamp;
@property (nonatomic, copy) NSString * _Nullable anonymousId;
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable context;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable integrations;
@property (nonatomic, strong) SEGDestinationMetadata * _Nullable metadata;
@end


SWIFT_CLASS_NAMED("ObjCAliasEvent")
@interface SEGAliasEvent : NSObject <SEGRawEvent>
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@property (nonatomic, readonly, copy) NSString * _Nullable messageId;
@property (nonatomic, readonly, copy) NSString * _Nullable timestamp;
@property (nonatomic, copy) NSString * _Nullable anonymousId;
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable context;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable integrations;
@property (nonatomic, strong) SEGDestinationMetadata * _Nullable metadata;
@property (nonatomic, copy) NSString * _Nullable previousId;
- (nonnull instancetype)initWithNewId:(NSString * _Nullable)newId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SEGConfiguration;

SWIFT_CLASS_NAMED("ObjCAnalytics")
@interface SEGAnalytics : NSObject
- (nonnull instancetype)initWithConfiguration:(SEGConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol SEGPlugin;

@interface SEGAnalytics (SWIFT_EXTENSION(Segment))
- (void)addPlugin:(id <SEGPlugin> _Nullable)plugin;
- (void)addPlugin:(id <SEGPlugin> _Nullable)plugin destinationKey:(NSString * _Nonnull)destinationKey;
@end


@interface SEGAnalytics (SWIFT_EXTENSION(Segment))
- (void)track:(NSString * _Nonnull)name;
- (void)track:(NSString * _Nonnull)name properties:(NSDictionary<NSString *, id> * _Nullable)properties;
/// Associate a user with their unique ID and record traits about them.
/// \param userId A database ID (or email address) for this user.
/// For more information on how we generate the UUID and Apple’s policies on IDs, see
/// https://segment.io/libraries/ios#ids
/// In the case when user logs out, make sure to call <code>reset()</code> to clear user’s identity info.
///
- (void)identify:(NSString * _Nonnull)userId;
/// Associate a user with their unique ID and record traits about them.
/// \param userId A database ID (or email address) for this user.
/// For more information on how we generate the UUID and Apple’s policies on IDs, see
/// https://segment.io/libraries/ios#ids
///
/// \param traits A dictionary of traits you know about the user. Things like: email, name, plan, etc.
/// In the case when user logs out, make sure to call <code>reset()</code> to clear user’s identity info.
///
- (void)identify:(NSString * _Nullable)userId traits:(NSDictionary<NSString *, id> * _Nullable)traits;
/// Track a screen change with a title, category and other properties.
/// \param title The title of the screen being tracked.
///
- (void)screen:(NSString * _Nonnull)title;
/// Track a screen change with a title, category and other properties.
/// \param title The title of the screen being tracked.
///
/// \param category A category to the type of screen if it applies.
///
- (void)screen:(NSString * _Nonnull)title category:(NSString * _Nullable)category;
/// Track a screen change with a title, category and other properties.
/// \param title The title of the screen being tracked.
///
/// \param category A category to the type of screen if it applies.
///
/// \param properties Any extra metadata associated with the screen. e.g. method of access, size, etc.
///
- (void)screen:(NSString * _Nonnull)title category:(NSString * _Nullable)category properties:(NSDictionary<NSString *, id> * _Nullable)properties;
/// Associate a user with a group such as a company, organization, project, etc.
/// \param groupId A unique identifier for the group identification in your system.
///
- (void)group:(NSString * _Nonnull)groupId;
/// Associate a user with a group such as a company, organization, project, etc.
/// \param groupId A unique identifier for the group identification in your system.
///
/// \param traits Traits of the group you may be interested in such as email, phone or name.
///
- (void)group:(NSString * _Nonnull)groupId traits:(NSDictionary<NSString *, id> * _Nullable)traits;
- (void)alias:(NSString * _Nonnull)newId;
@end

@class NSURL;

@interface SEGAnalytics (SWIFT_EXTENSION(Segment))
@property (nonatomic, readonly, copy) NSString * _Nonnull anonymousId;
@property (nonatomic, readonly, copy) NSString * _Nullable userId;
- (NSDictionary<NSString *, id> * _Nullable)traits SWIFT_WARN_UNUSED_RESULT;
- (void)flush;
- (void)reset;
- (NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
- (void)openURL:(NSURL * _Nonnull)url options:(NSDictionary<NSString *, id> * _Nonnull)options;
- (NSString * _Nonnull)version SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL_NAMED("ObjCPlugin")
@protocol SEGPlugin
@end


SWIFT_CLASS_NAMED("ObjCEventPlugin")
@interface SEGEventPlugin : NSObject <SEGPlugin>
- (id <SEGRawEvent> _Nullable)executeEvent:(id <SEGRawEvent> _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("ObjCBlockPlugin")
@interface SEGBlockPlugin : SEGEventPlugin
- (id <SEGRawEvent> _Nullable)executeEvent:(id <SEGRawEvent> _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithBlock:(id <SEGRawEvent> _Nullable (^ _Nonnull)(id <SEGRawEvent> _Nullable))block OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURLRequest;

SWIFT_CLASS_NAMED("ObjCConfiguration")
@interface SEGConfiguration : NSObject
/// Sets a reference to your application.  This can be useful in instances
/// where referring back to your application is necessary, such as within plugins
/// or async code.  The default value is <code>nil</code>.
@property (nonatomic) id _Nullable application;
/// Opt-in/out of tracking lifecycle events.  The default value is <code>false</code>.
@property (nonatomic) BOOL trackApplicationLifecycleEvents;
/// Set the number of events necessary to automatically flush. The default
/// value is <code>20</code>.
@property (nonatomic) NSInteger flushAt;
/// Set a time interval (in seconds) by which to trigger an automatic flush.
/// The default value is <code>30</code>.
@property (nonatomic) NSTimeInterval flushInterval;
/// Sets a default set of Settings.  Normally these will come from Segment’s
/// api.segment.com/v1/projects/<writekey>/settings, however in instances such
/// as first app launch, it can be useful to have a pre-set batch of settings to
/// ensure that the proper destinations and other settings are enabled prior
/// to receiving them from the Settings endpoint.  The default is <code>nil</code>.
/// You can retrieve a copy of your settings from the following URL:
/// https://cdn-settings.segment.com/v1/projects/<writekey>/settings
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull defaultSettings;
/// Enable/Disable the automatic adding of Segment as a destination.
/// This can be useful in instances such as Consent Management, or in device
/// mode only setups.  The default value is <code>true</code>.
@property (nonatomic) BOOL autoAddSegmentDestination;
/// Sets an alternative API host.  This is useful when a proxy is in use, or
/// events need to be routed to certain locales at all times (such as the EU).
/// The default value is <code>api.segment.io/v1</code>.
@property (nonatomic, copy) NSString * _Nonnull apiHost;
/// Sets an alternative CDN host for settings retrieval. This is useful when
/// a proxy is in use, or settings need to be queried from certain locales at
/// all times (such as the EU). The default value is <code>cdn-settings.segment.com/v1</code>.
@property (nonatomic, copy) NSString * _Nonnull cdnHost;
/// Sets a block to be used when generating outgoing HTTP requests.  Useful in
/// proxying, or adding additional header information for outbound traffic.
/// \param value A block to call when requests are made.
///
///
/// returns:
/// The current Configuration.
@property (nonatomic, copy) NSURLRequest * _Nonnull (^ _Nullable requestFactory)(NSURLRequest * _Nonnull);
/// Initialize a configuration object to pass along to an Analytics instance.
/// \param writeKey Your Segment write key value
///
- (nonnull instancetype)initWithWriteKey:(NSString * _Nonnull)writeKey OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ObjCDestinationMetadata")
@interface SEGDestinationMetadata : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("ObjCGroupEvent")
@interface SEGGroupEvent : NSObject <SEGRawEvent>
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@property (nonatomic, readonly, copy) NSString * _Nullable messageId;
@property (nonatomic, readonly, copy) NSString * _Nullable timestamp;
@property (nonatomic, copy) NSString * _Nullable anonymousId;
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable context;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable integrations;
@property (nonatomic, strong) SEGDestinationMetadata * _Nullable metadata;
@property (nonatomic, copy) NSString * _Nullable groupId;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable traits;
- (nonnull instancetype)initWithGroupId:(NSString * _Nullable)groupId traits:(NSDictionary<NSString *, id> * _Nullable)traits OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ObjCIdentifyEvent")
@interface SEGIdentifyEvent : NSObject <SEGRawEvent>
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@property (nonatomic, readonly, copy) NSString * _Nullable messageId;
@property (nonatomic, readonly, copy) NSString * _Nullable timestamp;
@property (nonatomic, copy) NSString * _Nullable anonymousId;
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable context;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable integrations;
@property (nonatomic, strong) SEGDestinationMetadata * _Nullable metadata;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable traits;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId traits:(NSDictionary<NSString *, id> * _Nullable)traits OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS_NAMED("ObjCScreenEvent")
@interface SEGScreenEvent : NSObject <SEGRawEvent>
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@property (nonatomic, readonly, copy) NSString * _Nullable messageId;
@property (nonatomic, readonly, copy) NSString * _Nullable timestamp;
@property (nonatomic, copy) NSString * _Nullable anonymousId;
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable context;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable integrations;
@property (nonatomic, strong) SEGDestinationMetadata * _Nullable metadata;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable category;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable properties;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name category:(NSString * _Nullable)category properties:(NSDictionary<NSString *, id> * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ObjCTrackEvent")
@interface SEGTrackEvent : NSObject <SEGRawEvent>
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@property (nonatomic, readonly, copy) NSString * _Nullable messageId;
@property (nonatomic, readonly, copy) NSString * _Nullable timestamp;
@property (nonatomic, copy) NSString * _Nullable anonymousId;
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable context;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable integrations;
@property (nonatomic, strong) SEGDestinationMetadata * _Nullable metadata;
@property (nonatomic, copy) NSString * _Nonnull event;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable properties;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name properties:(NSDictionary<NSString *, id> * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
#ifndef SEGMENT_SWIFT_H
#define SEGMENT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Segment",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSString;
@class SEGDestinationMetadata;

SWIFT_PROTOCOL_NAMED("ObjCRawEvent")
@protocol SEGRawEvent <NSObject>
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@property (nonatomic, readonly, copy) NSString * _Nullable messageId;
@property (nonatomic, readonly, copy) NSString * _Nullable timestamp;
@property (nonatomic, copy) NSString * _Nullable anonymousId;
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable context;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable integrations;
@property (nonatomic, strong) SEGDestinationMetadata * _Nullable metadata;
@end


SWIFT_CLASS_NAMED("ObjCAliasEvent")
@interface SEGAliasEvent : NSObject <SEGRawEvent>
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@property (nonatomic, readonly, copy) NSString * _Nullable messageId;
@property (nonatomic, readonly, copy) NSString * _Nullable timestamp;
@property (nonatomic, copy) NSString * _Nullable anonymousId;
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable context;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable integrations;
@property (nonatomic, strong) SEGDestinationMetadata * _Nullable metadata;
@property (nonatomic, copy) NSString * _Nullable previousId;
- (nonnull instancetype)initWithNewId:(NSString * _Nullable)newId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SEGConfiguration;

SWIFT_CLASS_NAMED("ObjCAnalytics")
@interface SEGAnalytics : NSObject
- (nonnull instancetype)initWithConfiguration:(SEGConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol SEGPlugin;

@interface SEGAnalytics (SWIFT_EXTENSION(Segment))
- (void)addPlugin:(id <SEGPlugin> _Nullable)plugin;
- (void)addPlugin:(id <SEGPlugin> _Nullable)plugin destinationKey:(NSString * _Nonnull)destinationKey;
@end


@interface SEGAnalytics (SWIFT_EXTENSION(Segment))
- (void)track:(NSString * _Nonnull)name;
- (void)track:(NSString * _Nonnull)name properties:(NSDictionary<NSString *, id> * _Nullable)properties;
/// Associate a user with their unique ID and record traits about them.
/// \param userId A database ID (or email address) for this user.
/// For more information on how we generate the UUID and Apple’s policies on IDs, see
/// https://segment.io/libraries/ios#ids
/// In the case when user logs out, make sure to call <code>reset()</code> to clear user’s identity info.
///
- (void)identify:(NSString * _Nonnull)userId;
/// Associate a user with their unique ID and record traits about them.
/// \param userId A database ID (or email address) for this user.
/// For more information on how we generate the UUID and Apple’s policies on IDs, see
/// https://segment.io/libraries/ios#ids
///
/// \param traits A dictionary of traits you know about the user. Things like: email, name, plan, etc.
/// In the case when user logs out, make sure to call <code>reset()</code> to clear user’s identity info.
///
- (void)identify:(NSString * _Nullable)userId traits:(NSDictionary<NSString *, id> * _Nullable)traits;
/// Track a screen change with a title, category and other properties.
/// \param title The title of the screen being tracked.
///
- (void)screen:(NSString * _Nonnull)title;
/// Track a screen change with a title, category and other properties.
/// \param title The title of the screen being tracked.
///
/// \param category A category to the type of screen if it applies.
///
- (void)screen:(NSString * _Nonnull)title category:(NSString * _Nullable)category;
/// Track a screen change with a title, category and other properties.
/// \param title The title of the screen being tracked.
///
/// \param category A category to the type of screen if it applies.
///
/// \param properties Any extra metadata associated with the screen. e.g. method of access, size, etc.
///
- (void)screen:(NSString * _Nonnull)title category:(NSString * _Nullable)category properties:(NSDictionary<NSString *, id> * _Nullable)properties;
/// Associate a user with a group such as a company, organization, project, etc.
/// \param groupId A unique identifier for the group identification in your system.
///
- (void)group:(NSString * _Nonnull)groupId;
/// Associate a user with a group such as a company, organization, project, etc.
/// \param groupId A unique identifier for the group identification in your system.
///
/// \param traits Traits of the group you may be interested in such as email, phone or name.
///
- (void)group:(NSString * _Nonnull)groupId traits:(NSDictionary<NSString *, id> * _Nullable)traits;
- (void)alias:(NSString * _Nonnull)newId;
@end

@class NSURL;

@interface SEGAnalytics (SWIFT_EXTENSION(Segment))
@property (nonatomic, readonly, copy) NSString * _Nonnull anonymousId;
@property (nonatomic, readonly, copy) NSString * _Nullable userId;
- (NSDictionary<NSString *, id> * _Nullable)traits SWIFT_WARN_UNUSED_RESULT;
- (void)flush;
- (void)reset;
- (NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
- (void)openURL:(NSURL * _Nonnull)url options:(NSDictionary<NSString *, id> * _Nonnull)options;
- (NSString * _Nonnull)version SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL_NAMED("ObjCPlugin")
@protocol SEGPlugin
@end


SWIFT_CLASS_NAMED("ObjCEventPlugin")
@interface SEGEventPlugin : NSObject <SEGPlugin>
- (id <SEGRawEvent> _Nullable)executeEvent:(id <SEGRawEvent> _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("ObjCBlockPlugin")
@interface SEGBlockPlugin : SEGEventPlugin
- (id <SEGRawEvent> _Nullable)executeEvent:(id <SEGRawEvent> _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithBlock:(id <SEGRawEvent> _Nullable (^ _Nonnull)(id <SEGRawEvent> _Nullable))block OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURLRequest;

SWIFT_CLASS_NAMED("ObjCConfiguration")
@interface SEGConfiguration : NSObject
/// Sets a reference to your application.  This can be useful in instances
/// where referring back to your application is necessary, such as within plugins
/// or async code.  The default value is <code>nil</code>.
@property (nonatomic) id _Nullable application;
/// Opt-in/out of tracking lifecycle events.  The default value is <code>false</code>.
@property (nonatomic) BOOL trackApplicationLifecycleEvents;
/// Set the number of events necessary to automatically flush. The default
/// value is <code>20</code>.
@property (nonatomic) NSInteger flushAt;
/// Set a time interval (in seconds) by which to trigger an automatic flush.
/// The default value is <code>30</code>.
@property (nonatomic) NSTimeInterval flushInterval;
/// Sets a default set of Settings.  Normally these will come from Segment’s
/// api.segment.com/v1/projects/<writekey>/settings, however in instances such
/// as first app launch, it can be useful to have a pre-set batch of settings to
/// ensure that the proper destinations and other settings are enabled prior
/// to receiving them from the Settings endpoint.  The default is <code>nil</code>.
/// You can retrieve a copy of your settings from the following URL:
/// https://cdn-settings.segment.com/v1/projects/<writekey>/settings
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull defaultSettings;
/// Enable/Disable the automatic adding of Segment as a destination.
/// This can be useful in instances such as Consent Management, or in device
/// mode only setups.  The default value is <code>true</code>.
@property (nonatomic) BOOL autoAddSegmentDestination;
/// Sets an alternative API host.  This is useful when a proxy is in use, or
/// events need to be routed to certain locales at all times (such as the EU).
/// The default value is <code>api.segment.io/v1</code>.
@property (nonatomic, copy) NSString * _Nonnull apiHost;
/// Sets an alternative CDN host for settings retrieval. This is useful when
/// a proxy is in use, or settings need to be queried from certain locales at
/// all times (such as the EU). The default value is <code>cdn-settings.segment.com/v1</code>.
@property (nonatomic, copy) NSString * _Nonnull cdnHost;
/// Sets a block to be used when generating outgoing HTTP requests.  Useful in
/// proxying, or adding additional header information for outbound traffic.
/// \param value A block to call when requests are made.
///
///
/// returns:
/// The current Configuration.
@property (nonatomic, copy) NSURLRequest * _Nonnull (^ _Nullable requestFactory)(NSURLRequest * _Nonnull);
/// Initialize a configuration object to pass along to an Analytics instance.
/// \param writeKey Your Segment write key value
///
- (nonnull instancetype)initWithWriteKey:(NSString * _Nonnull)writeKey OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ObjCDestinationMetadata")
@interface SEGDestinationMetadata : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("ObjCGroupEvent")
@interface SEGGroupEvent : NSObject <SEGRawEvent>
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@property (nonatomic, readonly, copy) NSString * _Nullable messageId;
@property (nonatomic, readonly, copy) NSString * _Nullable timestamp;
@property (nonatomic, copy) NSString * _Nullable anonymousId;
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable context;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable integrations;
@property (nonatomic, strong) SEGDestinationMetadata * _Nullable metadata;
@property (nonatomic, copy) NSString * _Nullable groupId;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable traits;
- (nonnull instancetype)initWithGroupId:(NSString * _Nullable)groupId traits:(NSDictionary<NSString *, id> * _Nullable)traits OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ObjCIdentifyEvent")
@interface SEGIdentifyEvent : NSObject <SEGRawEvent>
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@property (nonatomic, readonly, copy) NSString * _Nullable messageId;
@property (nonatomic, readonly, copy) NSString * _Nullable timestamp;
@property (nonatomic, copy) NSString * _Nullable anonymousId;
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable context;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable integrations;
@property (nonatomic, strong) SEGDestinationMetadata * _Nullable metadata;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable traits;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId traits:(NSDictionary<NSString *, id> * _Nullable)traits OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS_NAMED("ObjCScreenEvent")
@interface SEGScreenEvent : NSObject <SEGRawEvent>
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@property (nonatomic, readonly, copy) NSString * _Nullable messageId;
@property (nonatomic, readonly, copy) NSString * _Nullable timestamp;
@property (nonatomic, copy) NSString * _Nullable anonymousId;
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable context;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable integrations;
@property (nonatomic, strong) SEGDestinationMetadata * _Nullable metadata;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable category;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable properties;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name category:(NSString * _Nullable)category properties:(NSDictionary<NSString *, id> * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ObjCTrackEvent")
@interface SEGTrackEvent : NSObject <SEGRawEvent>
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@property (nonatomic, readonly, copy) NSString * _Nullable messageId;
@property (nonatomic, readonly, copy) NSString * _Nullable timestamp;
@property (nonatomic, copy) NSString * _Nullable anonymousId;
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable context;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable integrations;
@property (nonatomic, strong) SEGDestinationMetadata * _Nullable metadata;
@property (nonatomic, copy) NSString * _Nonnull event;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable properties;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name properties:(NSDictionary<NSString *, id> * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif

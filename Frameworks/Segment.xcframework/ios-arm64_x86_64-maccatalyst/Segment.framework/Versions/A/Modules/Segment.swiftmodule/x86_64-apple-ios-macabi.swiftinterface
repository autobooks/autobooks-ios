// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios13.1-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Segment
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Darwin.C
import Darwin
import Foundation
import Sovran
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
public class Analytics {
  public static var debugLogsEnabled: Swift.Bool
  public var timeline: Segment.Timeline
  public init(configuration: Segment.Configuration)
  public func process(event: any Segment.RawEvent)
  @objc deinit
}
extension Segment.Analytics {
  public var enabled: Swift.Bool {
    get
    set(value)
  }
  public var anonymousId: Swift.String {
    get
  }
  public var userId: Swift.String? {
    get
  }
  public var flushInterval: Foundation.TimeInterval {
    get
    set(value)
  }
  public var flushAt: Swift.Int {
    get
    set(value)
  }
  public var flushPolicies: [any Segment.FlushPolicy] {
    get
  }
  public func traits<T>() -> T? where T : Swift.Decodable, T : Swift.Encodable
  public func traits() -> [Swift.String : Any]?
  public func flush()
  public func reset()
  public func version() -> Swift.String
  public static func version() -> Swift.String
}
extension Segment.Analytics {
  public func settings() -> Segment.Settings?
  public func manuallyEnableDestination(plugin: any Segment.DestinationPlugin)
}
extension Segment.Analytics {
  public var hasUnsentEvents: Swift.Bool {
    get
  }
  public var pendingUploads: [Foundation.URL]? {
    get
  }
  public func purgeStorage()
  public func purgeStorage(fileURL: Foundation.URL)
  public func waitUntilStarted()
}
extension Segment.Analytics {
  public func openURL<T>(_ url: Foundation.URL, options: T? = nil) where T : Swift.Decodable, T : Swift.Encodable
  public func openURL(_ url: Foundation.URL, options: [Swift.String : Any] = [:])
}
public class Configuration {
  public init(writeKey: Swift.String)
  @objc deinit
}
extension Segment.Configuration {
  @discardableResult
  public func application(_ value: Any?) -> Segment.Configuration
  @discardableResult
  public func trackApplicationLifecycleEvents(_ enabled: Swift.Bool) -> Segment.Configuration
  @discardableResult
  public func flushAt(_ count: Swift.Int) -> Segment.Configuration
  @discardableResult
  public func flushInterval(_ interval: Foundation.TimeInterval) -> Segment.Configuration
  @discardableResult
  public func defaultSettings(_ settings: Segment.Settings?) -> Segment.Configuration
  @discardableResult
  public func autoAddSegmentDestination(_ value: Swift.Bool) -> Segment.Configuration
  @discardableResult
  public func apiHost(_ value: Swift.String) -> Segment.Configuration
  @discardableResult
  public func cdnHost(_ value: Swift.String) -> Segment.Configuration
  @discardableResult
  public func requestFactory(_ value: @escaping (Foundation.URLRequest) -> Foundation.URLRequest) -> Segment.Configuration
  @discardableResult
  public func errorHandler(_ value: @escaping (any Swift.Error) -> Swift.Void) -> Segment.Configuration
  @discardableResult
  public func flushPolicies(_ policies: [any Segment.FlushPolicy]) -> Segment.Configuration
}
public enum AnalyticsError : Swift.Error {
  case storageUnableToCreate(Swift.String)
  case storageUnableToWrite(Swift.String)
  case storageUnableToRename(Swift.String)
  case storageUnableToOpen(Swift.String)
  case storageUnableToClose(Swift.String)
  case storageInvalid(Swift.String)
  case storageUnknown(any Swift.Error)
  case networkUnexpectedHTTPCode(Swift.Int)
  case networkServerLimited(Swift.Int)
  case networkServerRejected(Swift.Int)
  case networkUnknown(any Swift.Error)
  case networkInvalidData
  case jsonUnableToSerialize(any Swift.Error)
  case jsonUnableToDeserialize(any Swift.Error)
  case jsonUnknown(any Swift.Error)
  case pluginError(any Swift.Error)
}
extension Segment.Analytics {
  public func reportInternalError(_ error: any Swift.Error, fatal: Swift.Bool = false)
  public static func reportInternalError(_ error: any Swift.Error, fatal: Swift.Bool = false)
}
extension Segment.Analytics {
  public func track<P>(name: Swift.String, properties: P?) where P : Swift.Decodable, P : Swift.Encodable
  public func track(name: Swift.String)
  public func identify<T>(userId: Swift.String, traits: T?) where T : Swift.Decodable, T : Swift.Encodable
  public func identify<T>(traits: T) where T : Swift.Decodable, T : Swift.Encodable
  public func identify(userId: Swift.String)
  public func screen<P>(title: Swift.String, category: Swift.String? = nil, properties: P?) where P : Swift.Decodable, P : Swift.Encodable
  public func screen(title: Swift.String, category: Swift.String? = nil)
  public func group<T>(groupId: Swift.String, traits: T?) where T : Swift.Decodable, T : Swift.Encodable
  public func group(groupId: Swift.String)
  public func alias(newId: Swift.String)
}
extension Segment.Analytics {
  public func track(name: Swift.String, properties: [Swift.String : Any]? = nil)
  public func identify(userId: Swift.String, traits: [Swift.String : Any]? = nil)
  public func screen(title: Swift.String, category: Swift.String? = nil, properties: [Swift.String : Any]? = nil)
  public func group(groupId: Swift.String, traits: [Swift.String : Any]?)
}
@objc(SEGAnalytics) public class ObjCAnalytics : ObjectiveC.NSObject {
  final public let analytics: Segment.Analytics
  @objc public init(configuration: Segment.ObjCConfiguration)
  public init(wrapping analytics: Segment.Analytics)
  @objc deinit
}
@objc extension Segment.ObjCAnalytics {
  @objc(track:) dynamic public func track(name: Swift.String)
  @objc(track:properties:) dynamic public func track(name: Swift.String, properties: [Swift.String : Any]?)
  @objc(identify:) dynamic public func identify(userId: Swift.String)
  @objc(identify:traits:) dynamic public func identify(userId: Swift.String?, traits: [Swift.String : Any]?)
  @objc(screen:) dynamic public func screen(title: Swift.String)
  @objc(screen:category:) dynamic public func screen(title: Swift.String, category: Swift.String?)
  @objc(screen:category:properties:) dynamic public func screen(title: Swift.String, category: Swift.String?, properties: [Swift.String : Any]?)
  @objc(group:) dynamic public func group(groupId: Swift.String)
  @objc(group:traits:) dynamic public func group(groupId: Swift.String, traits: [Swift.String : Any]?)
  @objc(alias:) dynamic public func alias(newId: Swift.String)
}
@objc extension Segment.ObjCAnalytics {
  @objc dynamic public var anonymousId: Swift.String {
    @objc get
  }
  @objc dynamic public var userId: Swift.String? {
    @objc get
  }
  @objc dynamic public func traits() -> [Swift.String : Any]?
  @objc dynamic public func flush()
  @objc dynamic public func reset()
  @objc dynamic public func settings() -> [Swift.String : Any]?
  @objc dynamic public func openURL(_ url: Foundation.URL, options: [Swift.String : Any] = [:])
  @objc dynamic public func version() -> Swift.String
}
@objc(SEGConfiguration) public class ObjCConfiguration : ObjectiveC.NSObject {
  @objc public var application: Any? {
    @objc get
    @objc set(value)
  }
  @objc public var trackApplicationLifecycleEvents: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc public var flushAt: Swift.Int {
    @objc get
    @objc set(value)
  }
  @objc public var flushInterval: Foundation.TimeInterval {
    @objc get
    @objc set(value)
  }
  @objc public var defaultSettings: [Swift.String : Any] {
    @objc get
    @objc set(value)
  }
  @objc public var autoAddSegmentDestination: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc public var apiHost: Swift.String {
    @objc get
    @objc set(value)
  }
  @objc public var cdnHost: Swift.String {
    @objc get
    @objc set(value)
  }
  @objc public var requestFactory: ((Foundation.URLRequest) -> Foundation.URLRequest)? {
    @objc get
    @objc set(value)
  }
  @objc public init(writeKey: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SEGDestinationMetadata) public class ObjCDestinationMetadata : ObjectiveC.NSObject {
  public var bundled: [Swift.String] {
    get
    set(v)
  }
  public var unbundled: [Swift.String] {
    get
    set(v)
  }
  public var bundledIds: [Swift.String] {
    get
    set(v)
  }
  @objc deinit
}
@objc(SEGRawEvent) public protocol ObjCRawEvent : ObjectiveC.NSObjectProtocol {
  @objc var type: Swift.String? { get }
  @objc var messageId: Swift.String? { get }
  @objc var timestamp: Swift.String? { get }
  @objc var anonymousId: Swift.String? { get set }
  @objc var userId: Swift.String? { get set }
  @objc var context: [Swift.String : Any]? { get set }
  @objc var integrations: [Swift.String : Any]? { get set }
  @objc var metadata: Segment.ObjCDestinationMetadata? { get set }
}
@_hasMissingDesignatedInitializers @objc(SEGTrackEvent) public class ObjCTrackEvent : ObjectiveC.NSObject, Segment.ObjCRawEvent {
  @objc public var type: Swift.String? {
    @objc get
  }
  @objc public var messageId: Swift.String? {
    @objc get
  }
  @objc public var timestamp: Swift.String? {
    @objc get
  }
  @objc public var anonymousId: Swift.String? {
    @objc get
    @objc set(v)
  }
  @objc public var userId: Swift.String? {
    @objc get
    @objc set(v)
  }
  @objc public var context: [Swift.String : Any]? {
    @objc get
    @objc set(v)
  }
  @objc public var integrations: [Swift.String : Any]? {
    @objc get
    @objc set(v)
  }
  @objc public var metadata: Segment.ObjCDestinationMetadata? {
    @objc get
    @objc set(v)
  }
  @objc public var event: Swift.String {
    @objc get
    @objc set(v)
  }
  @objc public var properties: [Swift.String : Any]? {
    @objc get
    @objc set(v)
  }
  @objc public init(name: Swift.String, properties: [Swift.String : Any]? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SEGIdentifyEvent) public class ObjCIdentifyEvent : ObjectiveC.NSObject, Segment.ObjCRawEvent {
  @objc public var type: Swift.String? {
    @objc get
  }
  @objc public var messageId: Swift.String? {
    @objc get
  }
  @objc public var timestamp: Swift.String? {
    @objc get
  }
  @objc public var anonymousId: Swift.String? {
    @objc get
    @objc set(v)
  }
  @objc public var userId: Swift.String? {
    @objc get
    @objc set(v)
  }
  @objc public var context: [Swift.String : Any]? {
    @objc get
    @objc set(v)
  }
  @objc public var integrations: [Swift.String : Any]? {
    @objc get
    @objc set(v)
  }
  @objc public var metadata: Segment.ObjCDestinationMetadata? {
    @objc get
    @objc set(v)
  }
  @objc public var traits: [Swift.String : Any]? {
    @objc get
    @objc set(v)
  }
  @objc public init(userId: Swift.String, traits: [Swift.String : Any]? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SEGScreenEvent) public class ObjCScreenEvent : ObjectiveC.NSObject, Segment.ObjCRawEvent {
  @objc public var type: Swift.String? {
    @objc get
  }
  @objc public var messageId: Swift.String? {
    @objc get
  }
  @objc public var timestamp: Swift.String? {
    @objc get
  }
  @objc public var anonymousId: Swift.String? {
    @objc get
    @objc set(v)
  }
  @objc public var userId: Swift.String? {
    @objc get
    @objc set(v)
  }
  @objc public var context: [Swift.String : Any]? {
    @objc get
    @objc set(v)
  }
  @objc public var integrations: [Swift.String : Any]? {
    @objc get
    @objc set(v)
  }
  @objc public var metadata: Segment.ObjCDestinationMetadata? {
    @objc get
    @objc set(v)
  }
  @objc public var name: Swift.String? {
    @objc get
    @objc set(v)
  }
  @objc public var category: Swift.String? {
    @objc get
    @objc set(v)
  }
  @objc public var properties: [Swift.String : Any]? {
    @objc get
    @objc set(v)
  }
  @objc public init(name: Swift.String, category: Swift.String?, properties: [Swift.String : Any]? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SEGGroupEvent) public class ObjCGroupEvent : ObjectiveC.NSObject, Segment.ObjCRawEvent {
  @objc public var type: Swift.String? {
    @objc get
  }
  @objc public var messageId: Swift.String? {
    @objc get
  }
  @objc public var timestamp: Swift.String? {
    @objc get
  }
  @objc public var anonymousId: Swift.String? {
    @objc get
    @objc set(v)
  }
  @objc public var userId: Swift.String? {
    @objc get
    @objc set(v)
  }
  @objc public var context: [Swift.String : Any]? {
    @objc get
    @objc set(v)
  }
  @objc public var integrations: [Swift.String : Any]? {
    @objc get
    @objc set(v)
  }
  @objc public var metadata: Segment.ObjCDestinationMetadata? {
    @objc get
    @objc set(v)
  }
  @objc public var groupId: Swift.String? {
    @objc get
    @objc set(v)
  }
  @objc public var traits: [Swift.String : Any]? {
    @objc get
    @objc set(v)
  }
  @objc public init(groupId: Swift.String?, traits: [Swift.String : Any]? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SEGAliasEvent) public class ObjCAliasEvent : ObjectiveC.NSObject, Segment.ObjCRawEvent {
  @objc public var type: Swift.String? {
    @objc get
  }
  @objc public var messageId: Swift.String? {
    @objc get
  }
  @objc public var timestamp: Swift.String? {
    @objc get
  }
  @objc public var anonymousId: Swift.String? {
    @objc get
    @objc set(v)
  }
  @objc public var userId: Swift.String? {
    @objc get
    @objc set(v)
  }
  @objc public var context: [Swift.String : Any]? {
    @objc get
    @objc set(v)
  }
  @objc public var integrations: [Swift.String : Any]? {
    @objc get
    @objc set(v)
  }
  @objc public var metadata: Segment.ObjCDestinationMetadata? {
    @objc get
    @objc set(v)
  }
  @objc public var previousId: Swift.String? {
    @objc get
    @objc set(v)
  }
  @objc public init(newId: Swift.String?)
  @objc deinit
}
@objc(SEGPlugin) public protocol ObjCPlugin {
}
public protocol ObjCPluginShim {
  func instance() -> any Segment.EventPlugin
}
@_inheritsConvenienceInitializers @objc(SEGEventPlugin) public class ObjCEventPlugin : ObjectiveC.NSObject, Segment.EventPlugin, Segment.ObjCPlugin {
  public var type: Segment.PluginType
  public var analytics: Segment.Analytics?
  @objc(executeEvent:) public func execute(event: (any Segment.ObjCRawEvent)?) -> (any Segment.ObjCRawEvent)?
  public func execute<T>(event: T?) -> T? where T : Segment.RawEvent
  @objc override dynamic public init()
  @objc deinit
}
@objc(SEGBlockPlugin) public class ObjCBlockPlugin : Segment.ObjCEventPlugin {
  @objc(executeEvent:) override public func execute(event: (any Segment.ObjCRawEvent)?) -> (any Segment.ObjCRawEvent)?
  @objc(initWithBlock:) public init(block: @escaping ((any Segment.ObjCRawEvent)?) -> (any Segment.ObjCRawEvent)?)
  @objc deinit
}
@objc extension Segment.ObjCAnalytics {
  @objc(addPlugin:) dynamic public func add(plugin: (any Segment.ObjCPlugin)?)
  @objc(addPlugin:destinationKey:) dynamic public func add(plugin: (any Segment.ObjCPlugin)?, destinationKey: Swift.String)
}
public enum PluginType : Swift.Int, Swift.CaseIterable {
  case before
  case enrichment
  case destination
  case after
  case utility
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [Segment.PluginType]
  public typealias RawValue = Swift.Int
  public static var allCases: [Segment.PluginType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum UpdateType {
  case initial
  case refresh
  public static func == (a: Segment.UpdateType, b: Segment.UpdateType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol Plugin : AnyObject {
  var type: Segment.PluginType { get }
  var analytics: Segment.Analytics? { get set }
  func configure(analytics: Segment.Analytics)
  func update(settings: Segment.Settings, type: Segment.UpdateType)
  func execute<T>(event: T?) -> T? where T : Segment.RawEvent
  func shutdown()
}
public protocol EventPlugin : Segment.Plugin {
  func identify(event: Segment.IdentifyEvent) -> Segment.IdentifyEvent?
  func track(event: Segment.TrackEvent) -> Segment.TrackEvent?
  func group(event: Segment.GroupEvent) -> Segment.GroupEvent?
  func alias(event: Segment.AliasEvent) -> Segment.AliasEvent?
  func screen(event: Segment.ScreenEvent) -> Segment.ScreenEvent?
  func reset()
  func flush()
}
public protocol DestinationPlugin : Segment.EventPlugin {
  var key: Swift.String { get }
  var timeline: Segment.Timeline { get }
  func add(plugin: any Segment.Plugin) -> any Segment.Plugin
  func apply(closure: (any Segment.Plugin) -> Swift.Void)
  func remove(plugin: any Segment.Plugin)
}
public protocol UtilityPlugin : Segment.EventPlugin {
}
public protocol VersionedPlugin {
  static func version() -> Swift.String
}
public typealias EnrichmentClosure = (_ event: (any Segment.RawEvent)?) -> (any Segment.RawEvent)?
@_hasMissingDesignatedInitializers public class ClosureEnrichment : Segment.Plugin {
  public var type: Segment.PluginType
  public var analytics: Segment.Analytics?
  public func execute<T>(event: T?) -> T? where T : Segment.RawEvent
  @objc deinit
}
extension Segment.Plugin {
  public func configure(analytics: Segment.Analytics)
}
extension Segment.DestinationPlugin {
  public func configure(analytics: Segment.Analytics)
  public func apply(closure: (any Segment.Plugin) -> Swift.Void)
  @discardableResult
  public func add(plugin: any Segment.Plugin) -> any Segment.Plugin
  @discardableResult
  public func add(enrichment: @escaping Segment.EnrichmentClosure) -> any Segment.Plugin
  public func remove(plugin: any Segment.Plugin)
}
extension Segment.Analytics {
  public func apply(closure: (any Segment.Plugin) -> Swift.Void)
  @discardableResult
  public func add(plugin: any Segment.Plugin) -> any Segment.Plugin
  @discardableResult
  public func add(enrichment: @escaping Segment.EnrichmentClosure) -> any Segment.Plugin
  public func remove(plugin: any Segment.Plugin)
  public func find<T>(pluginType: T.Type) -> T? where T : Segment.Plugin
  public func find(key: Swift.String) -> (any Segment.DestinationPlugin)?
}
public protocol OpeningURLs {
  func openURL(_ url: Foundation.URL, options: [Swift.String : Any])
}
@_hasMissingDesignatedInitializers public class Context {
  final public let type: Segment.PluginType
  weak public var analytics: Segment.Analytics?
  public func execute<T>(event: T?) -> T? where T : Segment.RawEvent
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DestinationMetadataPlugin : Segment.Plugin {
  final public let type: Segment.PluginType
  weak public var analytics: Segment.Analytics?
  public func update(settings: Segment.Settings, type: Segment.UpdateType)
  public func execute<T>(event: T?) -> T? where T : Segment.RawEvent
  @objc deinit
}
public class DeviceToken {
  final public let type: Segment.PluginType
  weak public var analytics: Segment.Analytics?
  public var token: Swift.String?
  required public init()
  public func execute<T>(event: T?) -> T? where T : Segment.RawEvent
  @objc deinit
}
extension Segment.Analytics {
  public func setDeviceToken(_ token: Swift.String)
}
public protocol RemoteNotifications : Segment.Plugin {
  func declinedRemoteNotifications()
  func registeredForRemoteNotifications(deviceToken: Foundation.Data)
  func failedToRegisterForRemoteNotification(error: (any Swift.Error)?)
  func receivedRemoteNotification(userInfo: [Swift.AnyHashable : Any])
  func handleAction(identifier: Swift.String, userInfo: [Swift.String : Any])
}
extension Segment.RemoteNotifications {
  public func declinedRemoteNotifications()
  public func registeredForRemoteNotifications(deviceToken: Foundation.Data)
  public func failedToRegisterForRemoteNotification(error: (any Swift.Error)?)
  public func receivedRemoteNotification(userInfo: [Swift.AnyHashable : Any])
  public func handleAction(identifier: Swift.String, userInfo: [Swift.String : Any])
}
extension Segment.Analytics {
  public func declinedRemoteNotifications()
  public func registeredForRemoteNotifications(deviceToken: Foundation.Data)
  public func failedToRegisterForRemoteNotification(error: (any Swift.Error)?)
  public func receivedRemoteNotification(userInfo: [Swift.AnyHashable : Any])
  public func handleAction(identifier: Swift.String, userInfo: [Swift.String : Any])
}
public protocol UserActivities {
  func continueUserActivity(_ activity: Foundation.NSUserActivity)
}
extension Segment.Analytics {
  public func continueUserActivity(_ activity: Foundation.NSUserActivity)
  public func openURL(_ url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any])
}
public protocol iOSLifecycle {
  func applicationDidEnterBackground(application: UIKit.UIApplication?)
  func applicationWillEnterForeground(application: UIKit.UIApplication?)
  func application(_ application: UIKit.UIApplication?, didFinishLaunchingWithOptions launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?)
  func applicationDidBecomeActive(application: UIKit.UIApplication?)
  func applicationWillResignActive(application: UIKit.UIApplication?)
  func applicationDidReceiveMemoryWarning(application: UIKit.UIApplication?)
  func applicationWillTerminate(application: UIKit.UIApplication?)
  func applicationSignificantTimeChange(application: UIKit.UIApplication?)
  func applicationBackgroundRefreshDidChange(application: UIKit.UIApplication?, refreshStatus: UIKit.UIBackgroundRefreshStatus)
}
extension Segment.iOSLifecycle {
  public func applicationDidEnterBackground(application: UIKit.UIApplication?)
  public func applicationWillEnterForeground(application: UIKit.UIApplication?)
  public func application(_ application: UIKit.UIApplication?, didFinishLaunchingWithOptions launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?)
  public func applicationDidBecomeActive(application: UIKit.UIApplication?)
  public func applicationWillResignActive(application: UIKit.UIApplication?)
  public func applicationDidReceiveMemoryWarning(application: UIKit.UIApplication?)
  public func applicationWillTerminate(application: UIKit.UIApplication?)
  public func applicationSignificantTimeChange(application: UIKit.UIApplication?)
  public func applicationBackgroundRefreshDidChange(application: UIKit.UIApplication?, refreshStatus: UIKit.UIBackgroundRefreshStatus)
}
extension Segment.SegmentDestination : Segment.iOSLifecycle {
  public func applicationWillEnterForeground(application: UIKit.UIApplication?)
  public func applicationDidEnterBackground(application: UIKit.UIApplication?)
}
extension Segment.IntervalBasedFlushPolicy : Segment.iOSLifecycle {
  public func applicationWillEnterForeground(application: UIKit.UIApplication?)
  public func applicationDidEnterBackground(application: UIKit.UIApplication?)
}
@_hasMissingDesignatedInitializers public class SegmentDestination : Segment.DestinationPlugin, Sovran.Subscriber {
  final public let type: Segment.PluginType
  final public let key: Swift.String
  final public let timeline: Segment.Timeline
  weak public var analytics: Segment.Analytics? {
    get
    set
  }
  public func update(settings: Segment.Settings, type: Segment.UpdateType)
  public func execute<T>(event: T?) -> T? where T : Segment.RawEvent
  public func flush()
  @objc deinit
}
extension Segment.SegmentDestination : Segment.VersionedPlugin {
  public static func version() -> Swift.String
}
@_hasMissingDesignatedInitializers public class StartupQueue : Segment.Plugin, Sovran.Subscriber {
  @Segment.Atomic public var running: Swift.Bool {
    get
    set
    _modify
  }
  final public let type: Segment.PluginType
  weak public var analytics: Segment.Analytics? {
    get
    set
  }
  public func execute<T>(event: T?) -> T? where T : Segment.RawEvent
  @objc deinit
}
public struct Settings : Swift.Codable {
  public var integrations: Segment.JSON?
  public var plan: Segment.JSON?
  public var edgeFunction: Segment.JSON?
  public var middlewareSettings: Segment.JSON?
  public init(writeKey: Swift.String, apiHost: Swift.String)
  public init(writeKey: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public static func load(from url: Foundation.URL?) -> Segment.Settings?
  public static func load(resource: Swift.String, bundle: Foundation.Bundle = Bundle.main) -> Segment.Settings?
  public func integrationSettings(forKey key: Swift.String) -> [Swift.String : Any]?
  public func integrationSettings<T>(forKey key: Swift.String) -> T? where T : Swift.Decodable, T : Swift.Encodable
  public func integrationSettings<T>(forPlugin plugin: any Segment.DestinationPlugin) -> T? where T : Swift.Decodable, T : Swift.Encodable
  public func hasIntegrationSettings(forPlugin plugin: any Segment.DestinationPlugin) -> Swift.Bool
  public func hasIntegrationSettings(key: Swift.String) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
}
extension Segment.Settings : Swift.Equatable {
  public static func == (lhs: Segment.Settings, rhs: Segment.Settings) -> Swift.Bool
}
extension Segment.Analytics : Sovran.Subscriber {
}
public class Timeline {
  public init()
  @objc deinit
}
extension Segment.Plugin {
  public func execute<T>(event: T?) -> T? where T : Segment.RawEvent
  public func update(settings: Segment.Settings, type: Segment.UpdateType)
  public func shutdown()
}
extension Segment.EventPlugin {
  public func execute<T>(event: T?) -> T? where T : Segment.RawEvent
  public func identify(event: Segment.IdentifyEvent) -> Segment.IdentifyEvent?
  public func track(event: Segment.TrackEvent) -> Segment.TrackEvent?
  public func screen(event: Segment.ScreenEvent) -> Segment.ScreenEvent?
  public func group(event: Segment.GroupEvent) -> Segment.GroupEvent?
  public func alias(event: Segment.AliasEvent) -> Segment.AliasEvent?
  public func flush()
  public func reset()
}
extension Segment.DestinationPlugin {
  public func execute<T>(event: T?) -> T? where T : Segment.RawEvent
}
public struct DestinationMetadata : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol RawEvent : Swift.Decodable, Swift.Encodable {
  var type: Swift.String? { get set }
  var anonymousId: Swift.String? { get set }
  var messageId: Swift.String? { get set }
  var userId: Swift.String? { get set }
  var timestamp: Swift.String? { get set }
  var context: Segment.JSON? { get set }
  var integrations: Segment.JSON? { get set }
  var metrics: [Segment.JSON]? { get set }
  var _metadata: Segment.DestinationMetadata? { get set }
}
public struct TrackEvent : Segment.RawEvent {
  public var type: Swift.String?
  public var anonymousId: Swift.String?
  public var messageId: Swift.String?
  public var userId: Swift.String?
  public var timestamp: Swift.String?
  public var context: Segment.JSON?
  public var integrations: Segment.JSON?
  public var metrics: [Segment.JSON]?
  public var _metadata: Segment.DestinationMetadata?
  public var event: Swift.String
  public var properties: Segment.JSON?
  public init(event: Swift.String, properties: Segment.JSON?)
  public init(existing: Segment.TrackEvent)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct IdentifyEvent : Segment.RawEvent {
  public var type: Swift.String?
  public var anonymousId: Swift.String?
  public var messageId: Swift.String?
  public var userId: Swift.String?
  public var timestamp: Swift.String?
  public var context: Segment.JSON?
  public var integrations: Segment.JSON?
  public var metrics: [Segment.JSON]?
  public var _metadata: Segment.DestinationMetadata?
  public var traits: Segment.JSON?
  public init(userId: Swift.String? = nil, traits: Segment.JSON? = nil)
  public init(existing: Segment.IdentifyEvent)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ScreenEvent : Segment.RawEvent {
  public var type: Swift.String?
  public var anonymousId: Swift.String?
  public var messageId: Swift.String?
  public var userId: Swift.String?
  public var timestamp: Swift.String?
  public var context: Segment.JSON?
  public var integrations: Segment.JSON?
  public var metrics: [Segment.JSON]?
  public var _metadata: Segment.DestinationMetadata?
  public var name: Swift.String?
  public var category: Swift.String?
  public var properties: Segment.JSON?
  public init(title: Swift.String? = nil, category: Swift.String?, properties: Segment.JSON? = nil)
  public init(existing: Segment.ScreenEvent)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GroupEvent : Segment.RawEvent {
  public var type: Swift.String?
  public var anonymousId: Swift.String?
  public var messageId: Swift.String?
  public var userId: Swift.String?
  public var timestamp: Swift.String?
  public var context: Segment.JSON?
  public var integrations: Segment.JSON?
  public var metrics: [Segment.JSON]?
  public var _metadata: Segment.DestinationMetadata?
  public var groupId: Swift.String?
  public var traits: Segment.JSON?
  public init(groupId: Swift.String? = nil, traits: Segment.JSON? = nil)
  public init(existing: Segment.GroupEvent)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AliasEvent : Segment.RawEvent {
  public var type: Swift.String?
  public var anonymousId: Swift.String?
  public var messageId: Swift.String?
  public var timestamp: Swift.String?
  public var context: Segment.JSON?
  public var integrations: Segment.JSON?
  public var metrics: [Segment.JSON]?
  public var _metadata: Segment.DestinationMetadata?
  public var userId: Swift.String?
  public var previousId: Swift.String?
  public init(newId: Swift.String?, previousId: Swift.String? = nil)
  public init(existing: Segment.AliasEvent)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Segment.RawEvent {
  public mutating func disableCloudIntegrations(exceptKeys: [Swift.String]? = nil)
  public mutating func enableCloudIntegrations(exceptKeys: [Swift.String]? = nil)
  public mutating func disableIntegration(key: Swift.String)
  public mutating func enableIntegration(key: Swift.String)
}
@propertyWrapper public class Atomic<T> {
  public init(wrappedValue value: T)
  public var wrappedValue: T {
    get
    set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class HTTPClient {
  @objc deinit
}
public enum JSON : Swift.Equatable {
  case null
  case bool(Swift.Bool)
  case number(Foundation.Decimal)
  case string(Swift.String)
  case array([Segment.JSON])
  case object([Swift.String : Segment.JSON])
  public init(_ object: [Swift.String : Any]) throws
  public init?(nilOrObject object: [Swift.String : Any]?) throws
  public init<T>(with value: T) throws where T : Swift.Decodable, T : Swift.Encodable
  public init(_ value: Any) throws
  public static func == (a: Segment.JSON, b: Segment.JSON) -> Swift.Bool
}
extension Segment.JSON : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.Encodable {
  public func prettyPrint() -> Swift.String
  public func toString() -> Swift.String
  public func toString(pretty: Swift.Bool) -> Swift.String
}
extension Segment.JSON {
  public func codableValue<T>() -> T? where T : Swift.Decodable, T : Swift.Encodable
  public var boolValue: Swift.Bool? {
    get
  }
  public var decimalValue: Foundation.Decimal? {
    get
  }
  public var intValue: Swift.Int? {
    get
  }
  public var uintValue: Swift.UInt? {
    get
  }
  public var floatValue: Swift.Float? {
    get
  }
  public var doubleValue: Swift.Double? {
    get
  }
  public var stringValue: Swift.String? {
    get
  }
  public var arrayValue: [Any]? {
    get
  }
  public var dictionaryValue: [Swift.String : Any]? {
    get
  }
}
extension Segment.JSON {
  public func mapTransform(_ keys: [Swift.String : Swift.String], valueTransform: ((_ key: Swift.String, _ value: Any) -> Any)? = nil) throws -> Segment.JSON
  public func add(value: Any) throws -> Segment.JSON?
  public func add(value: Any, forKey key: Swift.String) throws -> Segment.JSON?
  public func remove(key: Swift.String) throws -> Segment.JSON?
  public subscript(index: Swift.Int) -> Segment.JSON? {
    get
  }
  public subscript(key: Swift.String) -> Segment.JSON? {
    get
  }
  public subscript<T>(keyPath keyPath: Segment.KeyPath) -> T? where T : Swift.Decodable, T : Swift.Encodable {
    get
    set(newValue)
  }
  public func value<T>(forKeyPath keyPath: Segment.KeyPath) -> T? where T : Swift.Decodable, T : Swift.Encodable
  public mutating func setValue<T>(_ value: T?, forKeyPath keyPath: Segment.KeyPath) where T : Swift.Decodable, T : Swift.Encodable
}
extension Swift.Dictionary where Key == Swift.String, Value == Any {
  public func mapTransform(_ keys: [Swift.String : Swift.String], valueTransform: ((_ key: Key, _ value: Value) -> Any)? = nil) throws -> [Key : Value]
}
public struct BasicHandler {
}
public struct KeyPath {
  public init(_ string: Swift.String)
}
extension Segment.KeyPath : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.String)
  public init(unicodeScalarLiteral value: Swift.String)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension Swift.Dictionary where Key : Swift.StringProtocol {
  public subscript(keyPath keyPath: Segment.KeyPath) -> Any? {
    get
    set
  }
  public subscript(keyPath keyPath: Segment.KeyPath, reference reference: Any?) -> Any? {
    get
    set
  }
  public func exists(keyPath: Segment.KeyPath, reference: Any? = nil) -> Swift.Bool
}
extension Segment.Analytics {
  public func log(message: Swift.String)
}
@_hasMissingDesignatedInitializers public class CountBasedFlushPolicy : Segment.FlushPolicy {
  weak public var analytics: Segment.Analytics?
  public func configure(analytics: Segment.Analytics)
  public func shouldFlush() -> Swift.Bool
  public func updateState(event: any Segment.RawEvent)
  public func reset()
  @objc deinit
}
public protocol FlushPolicy : AnyObject {
  var analytics: Segment.Analytics? { get set }
  func configure(analytics: Segment.Analytics)
  func shouldFlush() -> Swift.Bool
  func updateState(event: any Segment.RawEvent)
  func reset()
}
extension Segment.Analytics {
  public func add(flushPolicy: any Segment.FlushPolicy)
  public func remove(flushPolicy: any Segment.FlushPolicy)
  public func remove<T>(flushPolicy: T.Type) where T : Segment.FlushPolicy
  public func removeAllFlushPolicies()
  public func find<T>(flushPolicy: T.Type) -> (any Segment.FlushPolicy)? where T : Segment.FlushPolicy
}
@_hasMissingDesignatedInitializers public class IntervalBasedFlushPolicy : Segment.FlushPolicy, Sovran.Subscriber {
  weak public var analytics: Segment.Analytics?
  @objc deinit
  public func configure(analytics: Segment.Analytics)
  public func shouldFlush() -> Swift.Bool
  public func updateState(event: any Segment.RawEvent)
  public func reset()
}
extension Segment.PluginType : Swift.Equatable {}
extension Segment.PluginType : Swift.Hashable {}
extension Segment.PluginType : Swift.RawRepresentable {}
extension Segment.UpdateType : Swift.Equatable {}
extension Segment.UpdateType : Swift.Hashable {}
extension Segment.Context : Segment.Plugin {}
extension Segment.DeviceToken : Segment.Plugin {}
